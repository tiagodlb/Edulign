// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            String         @id @default(uuid())
  nome          String
  email         String         @unique
  senha         String
  ativo         Boolean        @default(true)
  administrador Boolean        @default(false)
  dataCriacao   DateTime       @default(now())
  aluno         Aluno?
  admin         Administrador?
  professor     Professor?
}

model Professor {
  id        String           @id @default(uuid())
  usuario   Usuario          @relation(fields: [usuarioId], references: [id])
  usuarioId String           @unique
  turmas    ProfessorTurma[]

  @@map("professores")
}

model Turma {
  id              String   @id @default(uuid())
  nome            String
  descricao       String?
  codigo          String   @unique // Código único para alunos entrarem
  ativa           Boolean  @default(true)
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  // Relações
  alunos      Aluno[]
  professores ProfessorTurma[]
  simulados   SimuladoTurma[]
  materiais   MaterialTurma[]

  @@map("turmas")
}

model ProfessorTurma {
  id          String    @id @default(uuid())
  professor   Professor @relation(fields: [professorId], references: [id])
  professorId String
  turma       Turma     @relation(fields: [turmaId], references: [id])
  turmaId     String
  principal   Boolean   @default(false) // Professor principal da turma
  dataEntrada DateTime  @default(now())

  @@unique([professorId, turmaId])
  @@map("professor_turma")
}

model SimuladoTurma {
  id               String    @id @default(uuid())
  simulado         Simulado  @relation(fields: [simuladoId], references: [id])
  simuladoId       String
  turma            Turma     @relation(fields: [turmaId], references: [id])
  turmaId          String
  dataLiberacao    DateTime
  dataEncerramento DateTime?

  @@unique([simuladoId, turmaId])
  @@map("simulado_turma")
}

model MaterialTurma {
  id          String   @id @default(uuid())
  titulo      String
  descricao   String?
  tipo        String // 'PDF', 'VIDEO', 'LINK', 'ARQUIVO'
  url         String?
  arquivo     String? // Caminho do arquivo se for upload
  turma       Turma    @relation(fields: [turmaId], references: [id])
  turmaId     String
  dataCriacao DateTime @default(now())

  @@map("material_turma")
}

model Aluno {
  id        String     @id @default(uuid())
  usuario   Usuario    @relation(fields: [usuarioId], references: [id])
  usuarioId String     @unique
  turma     Turma?     @relation(fields: [turmaId], references: [id])
  turmaId   String?
  simulados Simulado[]
  respostas Resposta[]

  @@map("alunos")
}

model Administrador {
  id                   String         @id @default(uuid())
  usuario              Usuario        @relation(fields: [usuarioId], references: [id])
  usuarioId            String         @unique
  questoesCadastradas  Questao[]      @relation("QuestoesCadastradas")
  explicacoesRevisadas ExplicacaoIA[]
}

model Simulado {
  id          String          @id @default(uuid())
  titulo      String
  tipo        String // 'ENADE_AI', 'NORMAL'
  area        String
  tempoLimite Int // em minutos
  aluno       Aluno           @relation(fields: [alunoId], references: [id])
  alunoId     String
  questoes    Questao[]
  qtdQuestoes Int
  dataInicio  DateTime        @default(now())
  dataFim     DateTime?
  finalizado  Boolean         @default(false)
  respostas   Resposta[]
  turmas      SimuladoTurma[]

  @@index([alunoId])
  @@map("simulados")
}

model Questao {
  id           String        @id @default(uuid())
  enunciado    String        @db.Text
  comando      String        @db.Text
  area         String
  tipo         String // 'ENADE_AI', 'MANUAL', 'IMPORTADO'
  nivel        String // 'facil', 'medio', 'dificil'
  alternativas Alternativa[]
  suportes     Suporte[]
  topicos      String[]
  competencias String[]
  referencias  String[]      @db.Text
  dataCriacao  DateTime      @default(now())
  ano          Int? // Ano da prova ENADE (opcional)

  // Relações
  simulados       Simulado[]
  respostas       Resposta[]
  explicacaoIA    ExplicacaoIA?
  cadastradoPor   Administrador? @relation("QuestoesCadastradas", fields: [cadastradoPorId], references: [id])
  cadastradoPorId String?

  @@index([area, tipo])
  @@map("questoes")
}

model Alternativa {
  id            String     @id @default(uuid())
  texto         String     @db.Text
  correta       Boolean
  justificativa String?    @db.Text
  questaoId     String
  questao       Questao    @relation(fields: [questaoId], references: [id], onDelete: Cascade)
  respostas     Resposta[]

  @@index([questaoId])
  @@map("alternativas")
}

model Suporte {
  id        String  @id @default(uuid())
  tipo      String // 'texto', 'imagem', 'tabela', 'grafico'
  conteudo  String  @db.Text
  questaoId String
  questao   Questao @relation(fields: [questaoId], references: [id], onDelete: Cascade)

  @@index([questaoId])
  @@map("suportes")
}

model Resposta {
  id            String      @id @default(uuid())
  aluno         Aluno       @relation(fields: [alunoId], references: [id])
  alunoId       String
  questao       Questao     @relation(fields: [questaoId], references: [id])
  questaoId     String
  alternativa   Alternativa @relation(fields: [alternativaId], references: [id])
  alternativaId String
  correta       Boolean
  dataResposta  DateTime    @default(now())
  tempoResposta Float // em segundos
  simulado      Simulado    @relation(fields: [simuladoId], references: [id])
  simuladoId    String

  @@unique([simuladoId, questaoId])
  @@index([alunoId, simuladoId])
  @@map("respostas")
}

model ExplicacaoIA {
  id          String        @id @default(uuid())
  questao     Questao       @relation(fields: [questaoId], references: [id])
  questaoId   String        @unique
  explicacao  String        @db.Text
  revisada    Boolean       @default(false)
  revisor     Administrador @relation(fields: [revisorId], references: [id])
  revisorId   String
  dataGeracao DateTime      @default(now())
  dataRevisao DateTime?
  links       String[]      @db.Text
  observacoes String?       @db.Text

  @@index([revisorId])
  @@map("explicacoes_ia")
}
